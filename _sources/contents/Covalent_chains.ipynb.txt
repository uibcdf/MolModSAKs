{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ea6c9e94092e43a3adad34b4081cb86a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import molsysmt as msm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Covalent chains and blocks\n",
    "\n",
    "##  How to get covalent chains\n",
    "Lets load first of all a molecular system to work with in this section:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.demo_systems.files['1tcd.mmtf']\n",
    "molecular_system = msm.convert(molecular_system)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_c06fa_\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >form</th>        <th class=\"col_heading level0 col1\" >n_atoms</th>        <th class=\"col_heading level0 col2\" >n_groups</th>        <th class=\"col_heading level0 col3\" >n_components</th>        <th class=\"col_heading level0 col4\" >n_chains</th>        <th class=\"col_heading level0 col5\" >n_molecules</th>        <th class=\"col_heading level0 col6\" >n_entities</th>        <th class=\"col_heading level0 col7\" >n_waters</th>        <th class=\"col_heading level0 col8\" >n_proteins</th>        <th class=\"col_heading level0 col9\" >n_frames</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_c06fa_row0_col0\" class=\"data row0 col0\" >molsysmt.MolSys</td>\n",
       "                        <td id=\"T_c06fa_row0_col1\" class=\"data row0 col1\" >3983</td>\n",
       "                        <td id=\"T_c06fa_row0_col2\" class=\"data row0 col2\" >662</td>\n",
       "                        <td id=\"T_c06fa_row0_col3\" class=\"data row0 col3\" >167</td>\n",
       "                        <td id=\"T_c06fa_row0_col4\" class=\"data row0 col4\" >4</td>\n",
       "                        <td id=\"T_c06fa_row0_col5\" class=\"data row0 col5\" >166</td>\n",
       "                        <td id=\"T_c06fa_row0_col6\" class=\"data row0 col6\" >2</td>\n",
       "                        <td id=\"T_c06fa_row0_col7\" class=\"data row0 col7\" >165</td>\n",
       "                        <td id=\"T_c06fa_row0_col8\" class=\"data row0 col8\" >1</td>\n",
       "                        <td id=\"T_c06fa_row0_col9\" class=\"data row0 col9\" >1</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fddcc8b1990>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.info(molecular_system)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MolSysMT includes a method to get all covalent chains found in the molecular system given by a sequence of atom names. To illustrate how the method `molsysmt.covalent_chains` works lets extract all segments of atoms C, N, CA an C covalently bound in this order (C-N-CA-C):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "covalent_chains =msm.covalent_chains(molecular_system, chain=['atom_name==\"C\"', 'atom_name==\"N\"',\n",
    "                                                              'atom_name==\"CA\"', 'atom_name==\"C\"'],\n",
    "                                     selection=\"component_index==0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(247, 4)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covalent_chains.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The output is a numpy array 2-ranked where the dimension of the first axe or rank is the number of chains found in the system, and the second rank has dimension 4 (since it chain was chosen to have 4 atoms):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   2,    9,   10,   11],\n",
       "       [  11,   16,   17,   18],\n",
       "       [  18,   25,   26,   27],\n",
       "       ...,\n",
       "       [1877, 1884, 1885, 1886],\n",
       "       [1886, 1889, 1890, 1891],\n",
       "       [1891, 1896, 1897, 1898]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covalent_chains"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets check that the name of the atoms in any of the obtained chains is correct:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['C', 'N', 'CA', 'C'], dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, selection=covalent_chains[0], name=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The atom name specified at each place does not need to be unique, we can introduce variants at any position defining the covalent chain. Lets see for instance how to get all 4 atoms covalent chains where the first three atoms are C-N-CA, in this order, and the fourth atom can either be C or CB:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "covalent_chains =msm.covalent_chains(molecular_system, chain=['atom_name==\"C\"', 'atom_name==\"N\"',\n",
    "                                                              'atom_name==\"CA\"', 'atom_name==[\"C\", \"CB\"]'],\n",
    "                                                              selection=\"component_index==0\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The covalent chains defining the $\\phi$, $\\psi$, $\\omega$ and , $\\xi_1$ dihedral angles are obtained as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Covalent chains defining all phi dihedral angles in the molecular system\n",
    "phi_chains = msm.covalent_chains(molecular_system, chain=['atom_name==\"C\"', 'atom_name==\"N\"',\n",
    "                                                          'atom_name==\"CA\"', 'atom_name==\"C\"'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Covalent chains defining all psi dihedral angles in the molecular system\n",
    "psi_chains = msm.covalent_chains(molecular_system, chain=['atom_name==\"N\"', 'atom_name==\"CA\"',\n",
    "                                                          'atom_name==\"C\"', 'atom_name==\"N\"'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Covalent chains defining all omega dihedral angles in the molecular system\n",
    "omega_chains = msm.covalent_chains(molecular_system, chain=['atom_name==[\"CA\",\"CH3\"]', 'atom_name==\"C\"',\n",
    "                                                            'atom_name==\"N\"', 'atom_name==[\"CA\", \"CH3\"]'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Covalent chains defining all chi1 dihedral angles in the molecular system\n",
    "chi1_chains = msm.covalent_chains(molecular_system, chain=['atom_name==\"N\"', 'atom_name==\"CA\"',\n",
    "                                                           'atom_name==\"CB\"', 'atom_name==\"CG\"'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How to get the atoms quartets defining the dihedral angles\n",
    "\n",
    "MolSysMT includes a method to obtain the sets of atoms quartets defining all dihedral angles present in the system given their names. There is no need then to remember the atom names defining the angle $\\phi$, $\\psi$, $\\omega$, or any of the $\\chi$ angles. Lets see how this method works over one of the demo molecular systems:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.demo_systems.files['1tcd.mmtf']\n",
    "molecular_system = msm.convert(molecular_system)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The quartets defining the angles $\\phi$, $\\psi$ or $\\omega$ over the whole system can be obtained as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi_chains = msm.covalent_dihedral_quartets(molecular_system, dihedral_angle='phi')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[   2    9   10   11]\n",
      " [  11   16   17   18]\n",
      " [  18   25   26   27]\n",
      " ...\n",
      " [3789 3796 3797 3798]\n",
      " [3798 3801 3802 3803]\n",
      " [3803 3808 3809 3810]]\n"
     ]
    }
   ],
   "source": [
    "print(phi_chains)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The search of these quartets can be limited to a specific selection. Lets see how to get the quartes of the $\\psi$ angles in residues 10 to 15:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "psi_chains = msm.covalent_dihedral_quartets(molecular_system, dihedral_angle='psi',\n",
    "                                            selection='10<=group_index<=15')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 77  78  79  86]\n",
      " [ 86  87  88  92]\n",
      " [ 92  93  94 100]\n",
      " [100 101 102 104]\n",
      " [104 105 106 110]]\n"
     ]
    }
   ],
   "source": [
    "print(psi_chains)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Atoms chains defining $\\chi$ angles can be also extracted. Lets get, for instance, all $\\chi_{5}$ in the system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "chi5_chains = msm.covalent_dihedral_quartets(molecular_system, dihedral_angle='chi5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There's a high number of ARG residues in our system. ARG is the only amino-acide with a $\\chi_{5}$ dihedral angle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26\n"
     ]
    }
   ],
   "source": [
    "print(chi5_chains.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26\n"
     ]
    }
   ],
   "source": [
    "n_args = msm.get(molecular_system, target='group', selection='group_name==\"ARG\"', n_groups=True)\n",
    "print(n_args)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi_psi_chains = msm.covalent_dihedral_quartets(molecular_system, dihedral_angle='phi-psi')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(990, 4)\n"
     ]
    }
   ],
   "source": [
    "print(phi_psi_chains.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['C', 'N', 'CA', 'C'], dtype=object)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, selection=phi_psi_chains[0], name=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If all dihedral angles needs to be considered, the value 'all' for the input argument `dihedral_angle` returns all atoms quartets for any $\\phi$, $\\psi$, $\\omega$, $\\chi_{1}$, $\\chi_{2}$, $\\chi_{3}$, $\\chi_{4}$ and $\\chi_{5}$ angle:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_angles_chains = msm.covalent_dihedral_quartets(molecular_system, dihedral_angle='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2362, 4)\n"
     ]
    }
   ],
   "source": [
    "print(all_angles_chains.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following tables a summary of the dihedral angle definitions are included in this document for future reference. The corresponding string taken by the input argument `dihedral_angle` is written down between parentesis next to each greek letter naming the angle: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### $\\phi$ (`phi`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| all but PRO | C-N-CA-C | C cis to C | [-180, 180) |\n",
    "| PRO | C-N-CA-C | C cis to C | ~-90 |\n",
    "\n",
    "#### $\\psi$ (`psi`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| all | N-CA-C-N | N cis to N | [-180, 180) |\n",
    "\n",
    "#### $\\omega$ (`omega`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| all | CA-C-N-CA | CA cis to CA | ~180 |\n",
    "| all | CH3-C-N-CA | CA cis to CA | ~180 |\n",
    "| all | CA-C-N-CH3 | CA cis to CA | ~180 |\n",
    "\n",
    "#### $\\chi_{1}$ (`chi1`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| ASN | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| ASP | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| CYS | N-CA-CB-SG | SG cis to N | [-180, 180) |\n",
    "| GLN | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| GLU | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| HIS | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| ILE | N-CA-CB-CG1 | CG1 cis to N | [-180°, 180) |\n",
    "| LEU | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| LYS | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| MET | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| PHE | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| PRO | N-CA-CB-CG | CG cis to N | CA-CB is part of ring |\n",
    "| SER | N-CA-CB-OG | OG cis to N | [-180, 180) |\n",
    "| THR | N-CA-CB-OG1 | OG1 cis to N | [-180, 180) |\n",
    "| TRP | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| TYR | N-CA-CB-CG | CG cis to N | [-180, 180) |\n",
    "| VAL | N-CA-CB-CG1 | CG1 cis to N | [-180, 180) |\n",
    "\n",
    "\n",
    "### $\\chi_{2}$ (`chi2`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | CA-CB-CG-CD  | CD cis to CA     | [-180, 180) |\n",
    "| ASN | CA-CB-CG-OD1 | OD1 cis to CA    | [-180, 180) |\n",
    "| ASP | CA-CB-CG-OD  | OD1 cis to CA    | [-180, 180) |\n",
    "| GLN | CA-CB-CG-CD  | CD cis to CA     | [-180, 180) |\n",
    "| GLU | CA-CB-CG-CD  | CD cis to CA     | [-180, 180) |\n",
    "| HIS | CA-CB-CG-ND1 | ND1 cis to CA    | [-180, 180) |\n",
    "| ILE | CA-CB-CG1-CD | CD cis to CA     | [-180, 180) |\n",
    "| LEU | CA-CB-CG-CD1 | CD1 cis to CA    | [-180, 180) |\n",
    "| LYS | CA-CB-CG-CD  | CD cis to CA     | [-180, 180) |\n",
    "| MET | CA-CB-CG-SD  | SD cis to CA     | [-180, 180) |\n",
    "| PHE | CA-CB-CG-CD  | CD1 cis to CA    | [-180, 180) |\n",
    "| PRO | CA-CB-CG-CD  | CD cis to CA     | CB-CG is part of ring |\n",
    "| TRP | CA-CB-CG-CD1 | CD1 cis to CA    | [-180, 180) |\n",
    "| TYR | CA-CB-CG-CD1 | CD1 cis to CA    | [-180, 180) |\n",
    "\n",
    "#### $\\chi_{3}$ (`chi3`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | CB-CG-CD-NE  | NE cis to CB     | [-180, 180) |\n",
    "| GLN | CB-CG-CD-OE1 | OE1 cis to CB    | [-180, 180) |\n",
    "| GLU | CB-CG-CD-OE1 | OE1 cis to CB    | [-180, 180) |\n",
    "| LYS | CB-CG-CD-CE  | CE cis to CB     | [-180, 180) |\n",
    "| MET | CB-CG-SD-CE  | CE cis to CB     | [-180, 180) |\n",
    "\n",
    "#### $\\chi_{4}$ (`chi4`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | CG-CD-NE-CZ | CZ cis to CG      | [-180, 180) |\n",
    "| LYS | CG-CD-CE-NZ | NZ cis to CG      | [-180, 180) |\n",
    "\n",
    "#### $\\chi_{5}$ (`chi5`)\n",
    "\n",
    "| Residue | Atoms | Zero value | Range (degrees)|\n",
    "| :---: | :---: | :---: | :---: |\n",
    "| ARG | CD-NE-CZ-NH1 | NH1 cis to CD    | [-180, 180) |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Every dihedral angle is defined in a peptide by three vectors delimited by four consecutive covalently bonded atoms. The vector in the middle defines the orthogonal plane where rotations are defined by the projection of vectors first and third, this way two blocks of atoms change its relative positions: all atoms covalently bonded before and after the second vector in the polymer. Or explained in other words, removing the second vector two sets of covalently bonded atoms are defined. Each of these two atoms sets move in unison when the dihedral angle changes. MolSysMT includes the input argument `with_blocks` for the method `molsysmt.covalent_dihedral_quartets` to return these atoms sets together with the quartets. Lets see how it works with an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.demo_systems.metenkephalin()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi_chains, phi_blocks = msm.covalent_dihedral_quartets(molecular_system, dihedral_angle='phi',\n",
    "                                                        with_blocks=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets for instance have a look to the quartet defining the 3-th $\\phi$ angle:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4fa410cd58424e269fa627b6148f263f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "view = msm.view(molecular_system, viewer='NGLView')\n",
    "selection_quartet = msm.select(molecular_system, selection=phi_chains[2], to_syntaxis='NGLView')\n",
    "view.clear()\n",
    "view.add_licorice(color='white')\n",
    "view.add_ball_and_stick(selection_quartet, color='orange')\n",
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36},\n",
       "       {37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phi_blocks[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets show in blue and red the two blocks of atoms defined by this 4-th $\\phi$ dihedral angle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "af3072b7a19c4f899f2519c55d2af88e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "view = msm.view(molecular_system, viewer='NGLView')\n",
    "view.clear()\n",
    "selection_quartet = msm.select(molecular_system, selection=phi_chains[2], to_syntaxis='NGLView')\n",
    "selection_block_0 = msm.select(molecular_system, selection=list(phi_blocks[2][0]), to_syntaxis='NGLView')\n",
    "selection_block_1 = msm.select(molecular_system, selection=list(phi_blocks[2][1]), to_syntaxis='NGLView')\n",
    "view.add_licorice(color='white')\n",
    "view.add_ball_and_stick(selection_quartet, color='orange')\n",
    "view.add_ball_and_stick(selection_block_0, color='red')\n",
    "view.add_ball_and_stick(selection_block_1, color='blue')\n",
    "view"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  How to get covalent blocks\n",
    "\n",
    "In addition to getting the covalent chains, MolSysMT provides with a third method, `molsysmt.covalent_blocks`, to obtain the sets of atoms covalently bonded. In order to illustrate the results given by this method, lets load first of all a molecular system to work with it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.demo_systems.metenkephalin()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the molecular system as the only input argument, the output corresponds to the list of sets of atoms covalently bonded."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "blocks = msm.covalent_blocks(molecular_system)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}]\n"
     ]
    }
   ],
   "source": [
    "print(blocks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This way the method does not offer new information. The result is nothing but the definition of the components in the system. However, using the input argument `remove_bonds` the method turns into a more interesting tool. Lets remove a couple of bonds to see the effect:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[19, 21],\n",
       "       [26, 28],\n",
       "       [33, 35],\n",
       "       [53, 55]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.get(molecular_system, target='atom', selection='atom_name==[\"C\", \"N\"]', inner_bonded_atoms=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "blocks = msm.covalent_blocks(molecular_system, remove_bonds=[[19,21],[33,35]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\n",
      " {32, 33, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}\n",
      " {35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}]\n"
     ]
    }
   ],
   "source": [
    "print(blocks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The output can also be return as a numpy array:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "blocks = msm.covalent_blocks(molecular_system, remove_bonds=[[19,21],[33,35]], output_form='array')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case an array is returned with the index of the block each atom belongs to (0-based):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 ... 2 2 2]\n"
     ]
    }
   ],
   "source": [
    "print(blocks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
